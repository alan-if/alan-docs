= Introduction

Text adventures or, using a more appropriate term, interactive fiction, is a form of computer game which has many things in common with fiction in book form, role-playing games and puzzle-solving.
To create a high quality interactive fiction game, you need to be more of an author than a programmer.

Alan is a special purpose computer language specifically designed to make it very easy to create such adventure games requiring only limited programming skills.

The main principle of the design of the language is simplicity.
That is, it should be very easy to do common things, but it should also be possible to do more complicated things by constructs that are more complex.
This means that wherever a construct is optional, the system supplies some sensible default.

The author and a very good friend designed the first crude version of the Alan language in 1985.
During many years of incremental improvement and use, it has now reached its third major version.
This means that the language has a sound foundation, based on practical use.
Therefore, features have been added as experience has grown, from actual use and understanding of the most prioritised needs.

In this version, modern and novel object orientation features have been incorporated into the language that allow definition of classes, instantiation and inheritance of attributes and other features.
Do not worry if you find these terms incomprehensible at this point, Alan is still an easy language to use and by reading this manual, you will understand how these new features may aid you in your quest for adventures.



== Programmer's Pitch

Alan is an application-oriented language.
It features constructs that are natural to an author of interactive fiction.
Alan is a strictly typed, compiled, object-oriented language with single inheritance.
Classes inherit properties from their super-classes.
The class system allows polymorphism so that instances of subclasses are valid wherever a super-class is specified.
There are no explicit type declarations, except for instances of classes; instead, types are automatically inferred from expressions such as integers, strings or instances of a particular class.



== To the Reader

There are probably four major types of readers of this document:

1. Readers completely new to interactive fiction -- read the whole document from the beginning.

2. Readers familiar with writing interactive fiction but new to Alan -- read from <<Introduction to the Language>> onwards.

3. Alan v2 users wanting to upgrade -- you should read the separate document on conversion, then <<Introduction to the Language>> and onwards, with frequent use of <<Language Reference>> as a reference while doing your conversion.

4. Alan v3 users looking for detailed answers -- use the _Index_, look up the relevant sections in <<Language Reference>> but also glance through <<Concepts>> from <<Introduction to the Language>>. Visit http://www.alanif.se/[www.alanif.se^] for a collection of examples.

// @FIXME: In the paragraphs above and below, the "Index" should be a cross-reference link,
//         bu the problem is that in the HTML doc there is no Index. I should find a way
//         to output slightly different text for HTML docs, and use a cross-reference when
//         the doc is in a format that supports the Index!

All readers are encouraged to give feedback on the documentation, particularly if you could not find the answer to what you were looking for by using the index, the table of content or skimming through what you thought might be relevant parts of the documentation. You can find the authors through the web page http://www.alanif.se/[www.alanif.se^], where you also can enrol in the Alan mailing list, a place for new and seasoned Alan users alike!


