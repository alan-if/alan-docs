= Syntax Highlighting in Alan Documentation
Tristano Ajmone <tajmone@gmail.com>
v2.1, December 5, 2018
include::_inc_header-attributes.adoc[]
:doctype: book
:toclevels: 5
// Sections Numbering:
:sectnums!:
:sectnumlevels: 2


// =============================================================================
//                         Custom Attributes Definition
// =============================================================================
// Custom attributes shared by all docs:
include::_inc_custom-attributes.adoc[]

// *****************************************************************************
// *                                                                           *
// *                            Document Preamble                              *
// *                                                                           *
// *****************************************************************************

This document is for previewing how source code and other verbatim blocks will be rendered and styled in the final documentation, and for comparing quality and differences across all the supported output formats.

Some contents are format dependent and will vary according to the document's output format and the backend employed, providing additional information specific to that format and/or backend.

// ==================
// HTML Backend Only:
// ==================
ifeval::["{backend}" == "html5"]

[NOTE]
================================================================================
For syntax highlighting in the HTML5 backend we use a custom build of https://highlightjs.org/[highlight.js^] for which we've created an
https://github.com/tajmone/highlight.js/blob/Alan/src/languages/alan.js[Alan syntax definition^] from scratch.
================================================================================

endif::[]

// =================
// PDF Backend Only:
// =================
ifeval::["{backend}" != "html5"]

[NOTE]
================================================================================
For syntax highlighting in the PDF backend we use https://sourceforge.net/projects/xslthl/[XSLTHL^] for which we've created an Alan syntax definition from scratch.
================================================================================
endif::[]


// *****************************************************************************
// *                                                                           *
// *                         PART I. SYNTAXES PREVIEW                          *
// *                                                                           *
// *****************************************************************************

[[part_one]]
[reftext="Part I"]
= Syntaxes Preview

[partintro]
--
The first part of this document offers a quick preview of all the colored syntaxes supported by the Alan Docs template.

In-depth information and contextual tests for syntaxes that support syntax highlighing can be found in <<part_two>> of this document.
--

== Alan

Alan code examples are styles as `alan` source blocks.

[source,alan]
--------------------
include::snippets.alan[tag=sample]
--------------------

<1> Callouts use default colors, no customization.
<2> Callouts use default colors, no customization.

[NOTE]
================================================================================
Currently, there aren't any Alan sourcecode examples with callouts in the _Alan Manual_.
================================================================================


== BNF

BNF rules are styles as `bnf` source blocks.

[source,bnf,subs="macros"]
--------------------------------------------------------------------------------
class = 'EVERY' id
            [inheritance]
            {property}
        'END' 'EVERY' [id] ['.']
--------------------------------------------------------------------------------

[NOTE]
================================================================================
Currently, there aren't any BNF rules with callouts in the _Alan Manual_.
================================================================================

[IMPORTANT]
.CALLOUTS NOT SUPPORTED
================================================================================
Neither the HTML nor the PDF syntax highlighters are currently set to support BNF syntax.
This means that callouts are not currently being processed and can't be used.

If callouts need to be used inside BNF rules, we need to either:

* Add a BNF syntax to the highlighters.
* Use a different type of verbatim block.
================================================================================


== Game Transcripts

Game transcript use an `example` block with `role="gametranscript"`.

Although a game transcript is neither source code nor a verbatim block, I'm including it in this document to allow comparing its styles and colors to other block-type elements in the documentation.

[example,role="gametranscript"]
================================================================================
*West of House.* +
Welcome to Dungeon (ALAN Demo). This version created 29-FEB-92.

You are in an open field west of a big white house with a boarded front door. There is a small mailbox here.

&gt; _examine the mailbox_ +
I see nothing special about the mailbox.

&gt; _open it_ +
The small mailbox is now open. The small mailbox contains a leaflet.
================================================================================

[IMPORTANT]
.CALLOUTS NOT SUPPORTED
================================================================================
Game transcripts are not verbatim blocks, so callouts are not supported.
================================================================================



== Shell

For shell usage examples we use a `literal` block with `role="shell"`.
The color scheme employed is based on the link:https://blogs.msdn.microsoft.com/commandline/2017/08/02/updating-the-windows-console-colors/[new default console scheme of Windows 10^].

[literal, role="shell"]
................................................................................
D:\>alan -help <1>
Usage: ALAN <adventure> [-help] [options]

Arguments:
  <adventure>       -- file name, default extension '.alan' <2> <3>

Options:
  -help             -- this help
  -[-]verbose       -- verbose messages (default: OFF)
  -[-]warnings      -- [don't] show warning messages (default: ON)
  -[-]infos         -- [don't] show informational messages (default: OFF)
  -include <path>   -- additional directory to search after current when
                       looking for imported files (may be repeated)
................................................................................

<1> I've also styled the callouts background and foreground colors to match the shell scheme.
<2> By default, callouts have black circles and white numbers, which don't work well with the black background of the shell scheme.
<3> In the PDF document I haven't been able to tweak callouts colors.

[NOTE]
================================================================================
The _Alan Manual_ contains shell examples with callouts in
link:../../manual/manual.html#_format_of_messages[App. F.1. Format of Messages^].
================================================================================

// =================
// PDF Backend Only:
// =================
ifeval::["{backend}" != "html5"]

[WARNING]
.CALLOUTS PROBLEM
================================================================================
Unlike the HTML backend, I haven't found a way to customize the background color of callout discs inside shell examples; therefore the default black colored reverse-video circles are lost in the black background of the shell color scheme.

The PDF template uses SVG image files to render the reverse-video circled numbers; although it's possible to customize the XSL settings to point to customized SVG images, this setting would affect all callouts -- i.e. I haven't found a way to use different callout images depending on the block role.

Possible solutions to this problem:

* Provide customized SVG iamges with different background color (affects all callouts in the book).
* Disable callout icons and use text instead (i.e. `(1)`) via the `callout.graphics` setting.
* Use a lighter color scheme for shell (simplest solution).
================================================================================
endif::[]

// *****************************************************************************
// *                                                                           *
// *                        PART II. SYNTAXES DETAILS                          *
// *                                                                           *
// *****************************************************************************

[[part_two]]
[reftext="Part II"]
= Syntaxes Details

[partintro]
--
This part of the document covers in more detail the syntaxes which are syntax highlighted in the Alan Doc template, and provides also various tests to check how styles are rendered in various contexts.
--

// =============================================================================
//                                 Alan Syntax
// =============================================================================

== Alan Syntax

Different conversion toolchains use different tools for syntax highlighting.
For HTML format conversion, various highlighters are natively supported by Asciidoctor.
For PDF conversion, the usable highlighting tool(s) will be dictated by the third party backend employed.

In all cases, a custom Alan syntax definiton would have to be created for the highlighter tool used with each backend, as none of them ships with a native Alan definition (the sole exception being {Highlight}, which is not natively supported in any of the backends, but could be integrated into some of them).

// ==================
// HTML Backend Only:
// ==================
ifeval::["{backend}" == "html5"]

[WARNING]
================================================================================
Currently no syntax highlighters have been integrated into the HTML conversion toolchain.
I've created an Alan language definition for André Simon's {Highlight} tool, but haven't yet got around to integrate it into the toolchain.
Although it's not among the natively supported highlighters, it should be possible to integrate it into the HTML backend.
================================================================================
endif::[]

// =================
// PDF Backend Only:
// =================
ifeval::["{backend}" != "html5"]

[NOTE]
================================================================================
The PDF conversion toolchain uses {fopub} to create the PDF from the DocBook version of the documents.
Asciidoc-fopub ships with an integrated syntax highlighter, called XSLHL.
================================================================================
endif::[]

////
=== Alan Syntax Elements

The following example shows all the various Alan syntax elements groups that are highlighted, and their associated colors in the chosen color scheme.
////



=== Syntax Tests

Here follow some code snippets for testing both common- and edge-cases in the language and ensure they are rendered as expected.

==== Predefined Classes and Instances

Although it's usually unnecessary to highlight with separate styling the predefined Alan classes and instances (i.e. the `hero`), it might be desirable to be able to do so in tutorials and documentation, for educational purposes.
For this reason, I've added a special highlighting group for the predefined classes, and another one for the `hero`.
Both can be optionally enabled by assigning styles to them, or just be ignored (or set to the same style as normal text) to hide them in the highlighted source.

[source,alan]
--------------------
include::snippets.alan[tag=predefined_classes]
--------------------


==== Quoted Identifiers

Although quoted identifiers shouldn't receive any special coloring in the highlighted code, the syntax definition must be made aware of them to prevent false-positive keywords matches for tokens inside quoted identifiers:

[source,alan]
--------------------------------------------------------------------------------
The 'At the Bus Stop' IsA location --> Watch out for: 'AT', 'THE' and 'STOP'!
End The.
--------------------------------------------------------------------------------

This hidden feature will be implemented differently in each syntax definition, depending on how the specific syntax highlighting engine works.

However, in the final highlighted code, quoted identifiers are shown with the same color and style as the base (normal) text, effectively hiding to the end user the difference between quoted identifiers and plain code (normal identifiers are just treated as plain code).


===== Single Quotes Escaping

To prevent breaking up syntax highlighting, quoted identifiers need to support correctly escaping single quotes inside them via `''`. Although this won't be visible in the highlighted output of the following example, examining the document's source (with formats which support it, like HTML) would allow to check that the quoted identifier was correctly parsed and tagged by the highlighter:


[source,alan]
--------------------------------------------------------------------------------
The 'Bob''s House' IsA location --> Escaped apostrophe in location name.
End The.
--------------------------------------------------------------------------------


==== Strings



==== False Positive Keywords Matches

The following snippet tests against false positive keywords in strings and quoted identifiers. This should never happen, and if it does then the Alan syntax definition for that highlighter is flawed and needs to be fixed.

[source,alan]
--------------------------------------------------------------------------------
-- Tokens in strings and quoted IDs shouldn't be highligthed as keywords...

The 'At the Bus Stop' IsA location --> Watch out for: 'AT', 'THE' and 'STOP'!
  Description
    "An old man waits for the bus here." --> 'AN', 'FOR', 'THE', 'HERE'!
End The.
--------------------------------------------------------------------------------


==== Ligatures Support


The following snippets is meant to test if the current backend and/or font supports ligatures.
Some code fonts support ligatures replacements for common programming symbols, but they might differ in the way the represent `+>=+`, `+<=+`, `+=>+` and `+=<+`, depnding on which combinations are asigned as comparison oprators and which as arrows.

We must ensure that, if ligatures are supported in any converted document, Alan's `+>=+` (greater or equal), `+<=+` (less or equal) and `+=>+` (alternative `Then` in Rules) are correctly represented.

Here's the test snippet:

[source,alan]
--------------------
include::snippets.alan[tag=ligatures]
--------------------

And here's a screenshot of the above code displayed in Sublime Text 3 via the
https://github.com/tajmone/sublime-alan[Sublime Alan^] package:

.Example of correct ligatures support in Sublime Text.
image::sublime-alan-ligatures-screenshot.png[]


==== Callouts Support

Now it's time to test how callouts interact with the syntax highligher.


[source,alan]
--------------------------------------------------------------------------------
The shore IsA location <1>
  Name Shore of Great Sea <2>
  Description "A beautifyl sea shore, probably Paradise lost."
End The shore.
--------------------------------------------------------------------------------

<1> Instance declaration.
<2> Instance name.

// =============================================================================
//                                  BNF Syntax
// =============================================================================

== BNF Syntax

Currently, BNF blocks are not being syntax highlighted but implementing a syntax definition would be very easy.


[source,bnf]
--------------------------------------------------------------------------------
attribute_declaration = id
                      | 'NOT' id
                      | id integer
                      | id string
                      | id id
                      | id '{' values '}'
--------------------------------------------------------------------------------


[source,bnf]
--------------------------------------------------------------------------------
forms = indefinite | definite | negative

definite = 'DEFINITE' article_or_form

indefinite = [ 'INDEFINITE' ] article_or_form

negative = 'NEGATIVE' article_or_form

article_or_form = 'ARTICLE' {statement}
                | 'FORM' {statement}
--------------------------------------------------------------------------------

// EOF //
