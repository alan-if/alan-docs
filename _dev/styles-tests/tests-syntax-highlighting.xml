<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="5"?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>Syntax Highlighting in Alan Documentation</title>
<date>December 19, 2018</date>
<author>
<personname>
<firstname>Tristano</firstname>
<surname>Ajmone</surname>
</personname>
<email>tajmone@gmail.com</email>
</author>
<authorinitials>T.J.A.</authorinitials>
<revhistory>
<revision>
<revnumber>2.2</revnumber>
<date>December 19, 2018</date>
<authorinitials>T.J.A.</authorinitials>
<revremark>Backend: {toolchain}</revremark>
</revision>
</revhistory>
</info>
<preface>
<title></title>
<simpara>This document is for previewing how source code and other verbatim blocks will be rendered and styled in the final documentation, and for comparing quality and differences across all the supported output formats.</simpara>
<simpara>Some contents are format dependent and will vary according to the document&#8217;s output format and the backend employed, providing additional information specific to that format and/or backend.</simpara>
<note>
<simpara>For syntax highlighting in the PDF backend we use <link xl:href="https://sourceforge.net/projects/xslthl/">XSLTHL</link> for which we&#8217;ve created an Alan syntax definition from scratch.</simpara>
</note>
</preface>
<part xml:id="part_one" xreflabel="Part I">
<title>Syntaxes Preview</title>
<partintro>
<simpara>The first part of this document offers a quick preview of all the colored syntaxes supported by the Alan Docs template.</simpara>
<simpara>In-depth information and contextual tests for syntaxes that support syntax highlighing can be found in <xref linkend="part_two"/> of this document.</simpara>
</partintro>
<chapter xml:id="_alan">
<title>Alan</title>
<simpara>Alan code examples are styles as <literal>alan</literal> source blocks.</simpara>
<programlisting language="alan" linenumbering="unnumbered">--==============================================================================
-- "Barracks Example" by Tristano Ajmone <co xml:id="CO1-1"/>
--==============================================================================
The canteen IsA LOCATION <co xml:id="CO1-2"/>
  Name 'The Barrack''s Mess Hall'.
END The canteen.

The trolley IsA object At canteen
  Container Taking object.
    Limits
      Count 5 Else "The trolley is full!"
    Has Not been_examined.
  VERB examine
    DOES
      If This Has Not been_examined
        Then "This old trolley has surely seen better days. $nIt seems barely
              capable of carrying its own weight without collapsing, let alone
              endure its daily use!"
          Make This been_examined.
        Else "It's just an old trolley."
      End If.
  END VERB examine.
End The trolley.
--------------------------------------------------------------------------------
Start at canteen.</programlisting>
<calloutlist>
<callout arearefs="CO1-1">
<para>Callouts use default colors, no customization.</para>
</callout>
<callout arearefs="CO1-2">
<para>Callouts use default colors, no customization.</para>
</callout>
</calloutlist>
<formalpara>
<title>Alan Code With Title</title>
<para>
<programlisting language="alan" linenumbering="unnumbered">Every book IsA object.
  Description "It's just a book."
End Every.</programlisting>
</para>
</formalpara>
<note>
<simpara>Currently, there aren&#8217;t any Alan sourcecode examples with callouts in the <emphasis>Alan Manual</emphasis>.</simpara>
</note>
</chapter>
<chapter xml:id="_bnf">
<title>BNF</title>
<simpara>BNF rules are styles as <literal>bnf</literal> source blocks.</simpara>
<programlisting language="bnf" linenumbering="unnumbered">class = 'EVERY' id
            [inheritance]
            {property}
        'END' 'EVERY' [id] ['.']</programlisting>
<formalpara>
<title>BNF Rules Block With Title</title>
<para>
<programlisting language="bnf" linenumbering="unnumbered">class = 'EVERY' id
            [inheritance]
            {property}
        'END' 'EVERY' [id] ['.']</programlisting>
</para>
</formalpara>
<note>
<simpara>Currently, there aren&#8217;t any BNF rules with callouts in the <emphasis>Alan Manual</emphasis>.</simpara>
</note>
<important>
<title>CALLOUTS NOT SUPPORTED</title>
<simpara>Neither the HTML nor the PDF syntax highlighters are currently set to support BNF syntax.
This means that callouts are not currently being processed and can&#8217;t be used.</simpara>
<simpara>If callouts need to be used inside BNF rules, we need to either:</simpara>
<itemizedlist>
<listitem>
<simpara>Add a BNF syntax to the highlighters.</simpara>
</listitem>
<listitem>
<simpara>Use a different type of verbatim block.</simpara>
</listitem>
</itemizedlist>
</important>
</chapter>
<chapter xml:id="_game_transcripts">
<title>Game Transcripts</title>
<simpara>Game transcript use an <literal>example</literal> block with <literal>role="gametranscript"</literal>.</simpara>
<simpara>Although a game transcript is neither source code nor a verbatim block, I&#8217;m including it in this document to allow comparing its styles and colors to other block-type elements in the documentation.</simpara>
<informalexample role="gametranscript">
<simpara><emphasis role="strong">West of House.</emphasis><?asciidoc-br?>
Welcome to Dungeon (ALAN Demo). This version created 29-FEB-92.</simpara>
<simpara>You are in an open field west of a big white house with a boarded front door. There is a small mailbox here.</simpara>
<simpara>&gt; <emphasis>examine the mailbox</emphasis><?asciidoc-br?>
I see nothing special about the mailbox.</simpara>
<simpara>&gt; <emphasis>open it</emphasis><?asciidoc-br?>
The small mailbox is now open. The small mailbox contains a leaflet.</simpara>
</informalexample>
<example role="gametranscript">
<title>Game Transcript With Title</title>
<simpara>&gt; <emphasis>north</emphasis><?asciidoc-br?></simpara>
</example>
<important>
<title>CALLOUTS NOT SUPPORTED</title>
<simpara>Game transcripts are not verbatim blocks, so callouts are not supported.</simpara>
</important>
</chapter>
<chapter xml:id="_shell">
<title>Shell</title>
<simpara>For shell usage examples we use a <literal>literal</literal> block with <literal>role="shell"</literal>.
The color scheme employed is based on the <link xl:href="https://blogs.msdn.microsoft.com/commandline/2017/08/02/updating-the-windows-console-colors/">new default console scheme of Windows 10</link>.</simpara>
<literallayout role="shell" class="monospaced">D:\&gt;alan -help <co xml:id="CO2-1"/>
Usage: ALAN &lt;adventure&gt; [-help] [options]

Arguments:
  &lt;adventure&gt;       -- file name, default extension '.alan' <co xml:id="CO2-2"/> <co xml:id="CO2-3"/>

Options:
  -help             -- this help
  -[-]verbose       -- verbose messages (default: OFF)
  -[-]warnings      -- [don't] show warning messages (default: ON)
  -[-]infos         -- [don't] show informational messages (default: OFF)
  -include &lt;path&gt;   -- additional directory to search after current when
                       looking for imported files (may be repeated)</literallayout>
<calloutlist>
<callout arearefs="CO2-1">
<para>I&#8217;ve also styled the callouts background and foreground colors to match the shell scheme.</para>
</callout>
<callout arearefs="CO2-2">
<para>By default, callouts have black circles and white numbers, which don&#8217;t work well with the black background of the shell scheme.</para>
</callout>
<callout arearefs="CO2-3">
<para>In the PDF document I haven&#8217;t been able to tweak callouts colors.</para>
</callout>
</calloutlist>
<formalpara>
<title>Shell Sample With Title</title>
<para>
<literallayout role="shell" class="monospaced">D:\&gt;dir</literallayout>
</para>
</formalpara>
<note>
<simpara>The <emphasis>Alan Manual</emphasis> contains shell examples with callouts in
<link xl:href="../../manual/manual.html#_format_of_messages">App. F.1. Format of Messages</link>.</simpara>
</note>
<warning>
<title>CALLOUTS PROBLEM</title>
<simpara>Unlike the HTML backend, I haven&#8217;t found a way to customize the background color of callout discs inside shell examples; therefore the default black colored reverse-video circles are lost in the black background of the shell color scheme.</simpara>
<simpara>The PDF template uses SVG image files to render the reverse-video circled numbers; although it&#8217;s possible to customize the XSL settings to point to customized SVG images, this setting would affect all callouts&#8201;&#8212;&#8201;i.e. I haven&#8217;t found a way to use different callout images depending on the block role.</simpara>
<simpara>Possible solutions to this problem:</simpara>
<itemizedlist>
<listitem>
<simpara>Provide customized SVG iamges with different background color (affects all callouts in the book).</simpara>
</listitem>
<listitem>
<simpara>Disable callout icons and use text instead (i.e. <literal>(1)</literal>) via the <literal>callout.graphics</literal> setting.</simpara>
</listitem>
<listitem>
<simpara>Use a lighter color scheme for shell (simplest solution).</simpara>
</listitem>
</itemizedlist>
</warning>
</chapter>
</part>
<part xml:id="part_two" xreflabel="Part II">
<title>Syntaxes Details</title>
<partintro>
<simpara>This part of the document covers in more detail the syntaxes which are syntax highlighted in the Alan Doc template, and provides also various tests to check how styles are rendered in various contexts.</simpara>
</partintro>
<chapter xml:id="_alan_syntax">
<title>Alan Syntax</title>
<simpara>Different conversion toolchains use different tools for syntax highlighting.
For HTML format conversion, various highlighters are natively supported by Asciidoctor.
For PDF conversion, the usable highlighting tool(s) will be dictated by the third party backend employed.</simpara>
<simpara>In all cases, a custom Alan syntax definiton would have to be created for the highlighter tool used with each backend, as none of them ships with a native Alan definition (the sole exception being <link xl:href="http://www.andre-simon.de/">Highlight</link>, which is not natively supported in any of the backends, but could be integrated into some of them).</simpara>
<note>
<simpara>The PDF conversion toolchain uses <link xl:href="https://github.com/asciidoctor/asciidoctor-fopub">asciidoctor-fopub</link> to create the PDF from the DocBook version of the documents.
Asciidoc-fopub ships with an integrated syntax highlighter, called XSLHL.</simpara>
</note>
<section xml:id="_syntax_tests">
<title>Syntax Tests</title>
<simpara>Here follow some code snippets for testing both common- and edge-cases in the language and ensure they are rendered as expected.</simpara>
<section xml:id="_predefined_classes_and_instances">
<title>Predefined Classes and Instances</title>
<simpara>Although it&#8217;s usually unnecessary to highlight with separate styling the predefined Alan classes and instances (i.e. the <literal>hero</literal>), it might be desirable to be able to do so in tutorials and documentation, for educational purposes.
For this reason, I&#8217;ve added a special highlighting group for the predefined classes, and another one for the <literal>hero</literal>.
Both can be optionally enabled by assigning styles to them, or just be ignored (or set to the same style as normal text) to hide them in the highlighted source.</simpara>
<programlisting language="alan" linenumbering="unnumbered">Synonyms me = hero.

The basement IsA location.
  Description "What a dark ang gloomy place!"
End The.

The vampire IsA actor At basement.
End The.

The coffin IsA object At basement.
  Container taking thing.
End The.

ADD TO EVERY thing
  VERB examine
    Does
      "You examine $+1, but find nothing unusual."
  END VERB.
END ADD TO.

ADD TO EVERY string
  VERB 'say'
    Does
      "You say ""$$" Say This. "$$""!"
  END VERB.
END ADD TO.

ADD TO EVERY integer
  VERB shout
    Does
      "You shout ""$$" Say This. "$$"" out loud!"
  END VERB.
END ADD TO.

ADD TO EVERY literal
  VERB whisper
    Does
      "You whisper ""$$" Say This. "$$""!"
  END VERB.
END ADD TO.

--------------------------------------------------------------------------------

Start at basement.</programlisting>
</section>
<section xml:id="_quoted_identifiers">
<title>Quoted Identifiers</title>
<simpara>Although quoted identifiers shouldn&#8217;t receive any special coloring in the highlighted code, the syntax definition must be made aware of them to prevent false-positive keywords matches for tokens inside quoted identifiers:</simpara>
<programlisting language="alan" linenumbering="unnumbered">The 'At the Bus Stop' IsA location --&gt; Watch out for: 'AT', 'THE' and 'STOP'!
End The.</programlisting>
<simpara>This hidden feature will be implemented differently in each syntax definition, depending on how the specific syntax highlighting engine works.</simpara>
<simpara>However, in the final highlighted code, quoted identifiers are shown with the same color and style as the base (normal) text, effectively hiding to the end user the difference between quoted identifiers and plain code (normal identifiers are just treated as plain code).</simpara>
<section xml:id="_single_quotes_escaping">
<title>Single Quotes Escaping</title>
<simpara>To prevent breaking up syntax highlighting, quoted identifiers need to support correctly escaping single quotes inside them via <literal>''</literal>. Although this won&#8217;t be visible in the highlighted output of the following example, examining the document&#8217;s source (with formats which support it, like HTML) would allow to check that the quoted identifier was correctly parsed and tagged by the highlighter:</simpara>
<programlisting language="alan" linenumbering="unnumbered">The 'Bob''s House' IsA location --&gt; Escaped apostrophe in location name.
End The.</programlisting>
</section>
</section>
<section xml:id="_strings">
<title>Strings</title>

</section>
<section xml:id="_false_positive_keywords_matches">
<title>False Positive Keywords Matches</title>
<simpara>The following snippet tests against false positive keywords in strings and quoted identifiers. This should never happen, and if it does then the Alan syntax definition for that highlighter is flawed and needs to be fixed.</simpara>
<programlisting language="alan" linenumbering="unnumbered">-- Tokens in strings and quoted IDs shouldn't be highligthed as keywords...

The 'At the Bus Stop' IsA location --&gt; Watch out for: 'AT', 'THE' and 'STOP'!
  Description
    "An old man waits for the bus here." --&gt; 'AN', 'FOR', 'THE', 'HERE'!
End The.</programlisting>
</section>
<section xml:id="_ligatures_support">
<title>Ligatures Support</title>
<simpara>The following snippets is meant to test if the current backend and/or font supports ligatures.
Some code fonts support ligatures replacements for common programming symbols, but they might differ in the way the represent <literal>&gt;=</literal>, <literal>&lt;=</literal>, <literal>=&gt;</literal> and <literal>=&lt;</literal>, depnding on which combinations are asigned as comparison oprators and which as arrows.</simpara>
<simpara>We must ensure that, if ligatures are supported in any converted document, Alan&#8217;s <literal>&gt;=</literal> (greater or equal), <literal>&lt;=</literal> (less or equal) and <literal>=&gt;</literal> (alternative <literal>Then</literal> in Rules) are correctly represented.</simpara>
<simpara>Here&#8217;s the test snippet:</simpara>
<programlisting language="alan" linenumbering="unnumbered">--&gt; Test "string identity operator" ligature  ('='+'=' -&gt; '==')
If text Of notepad Not == "xyzzy" Then

--&gt; Test "greater or equal" ligature          ('&gt;'+'=' -&gt; '&gt;=')
If temperature Of oven Not &gt;= 100 Then

--&gt; Test "less or equal" ligature             ('&lt;'+'=' -&gt; '&lt;=')
If weather Of world Not &lt;= protection Of hero Then

--&gt; Test "THEN symbol" ligature               ('='+'&gt;' -&gt; '=&gt;')
When hero At cave =&gt;</programlisting>
<simpara>And here&#8217;s a screenshot of the above code displayed in Sublime Text 3 via the
<link xl:href="https://github.com/tajmone/sublime-alan">Sublime Alan</link> package:</simpara>
<figure>
<title>Example of correct ligatures support in Sublime Text.</title>
<mediaobject>
<imageobject>
<imagedata fileref="sublime-alan-ligatures-screenshot.png"/>
</imageobject>
<textobject><phrase>sublime alan ligatures screenshot</phrase></textobject>
</mediaobject>
</figure>
</section>
<section xml:id="_callouts_support">
<title>Callouts Support</title>
<simpara>Now it&#8217;s time to test how callouts interact with the syntax highligher.</simpara>
<programlisting language="alan" linenumbering="unnumbered">The shore IsA location <co xml:id="CO3-1"/>
  Name Shore of Great Sea <co xml:id="CO3-2"/>
  Description "A beautifyl sea shore, probably Paradise lost."
End The shore.</programlisting>
<calloutlist>
<callout arearefs="CO3-1">
<para>Instance declaration.</para>
</callout>
<callout arearefs="CO3-2">
<para>Instance name.</para>
</callout>
</calloutlist>
</section>
</section>
</chapter>
<chapter xml:id="_bnf_syntax">
<title>BNF Syntax</title>
<simpara>Currently, BNF blocks are not being syntax highlighted but implementing a syntax definition would be very easy.</simpara>
<programlisting language="bnf" linenumbering="unnumbered">attribute_declaration = id
                      | 'NOT' id
                      | id integer
                      | id string
                      | id id
                      | id '{' values '}'</programlisting>
<programlisting language="bnf" linenumbering="unnumbered">forms = indefinite | definite | negative

definite = 'DEFINITE' article_or_form

indefinite = [ 'INDEFINITE' ] article_or_form

negative = 'NEGATIVE' article_or_form

article_or_form = 'ARTICLE' {statement}
                | 'FORM' {statement}</programlisting>
</chapter>
</part>
</book>