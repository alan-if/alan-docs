include::inc/attr_header.adoc[]
= Syntax Highlighting via {highlighter}
Tristano Ajmone <tajmone@gmail.com>
v3.1, October 20, 2021
:doctype: book
:toclevels: 5
:sectnums!:
:sectnumlevels: 2

// =============================================================================
//                         Custom Attributes Definition
// =============================================================================
// Custom attributes shared by all docs:
include::inc/attr_custom.adoc[]

// *****************************************************************************
// *                                                                           *
// *                            Document Preamble                              *
// *                                                                           *
// *****************************************************************************

This document is for previewing how source code and other verbatim blocks will be rendered and styled in the final documentation, and for comparing quality and differences across all the supported output formats and using different syntax highlighters.

Some contents are format dependent and will vary according to the document's output format and the backend employed, providing additional information specific to that format and/or backend.

// ==================
// HTML Backend Only:
// ==================
ifeval::["{backend}" == "html5"]

[NOTE]
================================================================================
This HTML document is using
ifeval::["{source-highlighter}" == "rouge"]
{Rouge}
endif::[]
ifeval::["{source-highlighter}" == "highlight"]
{Highlight}
endif::[]
ifeval::["{source-highlighter}" == "highlightjs"]
{hljs}
endif::[]
for syntax highlighting code blocks.

We've created our custom ALAN syntax definition to support ALAN highlighting.
================================================================================

endif::[]

// =================
// PDF Backend Only:
// =================
ifeval::["{backend}" != "html5"]

[NOTE]
================================================================================
For syntax highlighting in the PDF backend we use https://sourceforge.net/projects/xslthl/[XSLTHL^] for which we've created an Alan syntax definition from scratch.
================================================================================
endif::[]


// *****************************************************************************
// *                                                                           *
// *                         PART I. SYNTAXES PREVIEW                          *
// *                                                                           *
// *****************************************************************************

[[part_one]]
[reftext="Part I"]
= Syntaxes Preview

[partintro]
--
The first part of this document offers a quick preview of all the colored syntaxes supported by the Alan Docs template.

In-depth information and contextual tests for syntaxes that support syntax highlighing can be found in <<part_two>> of this document.
--

== Alan

To enable syntax highlighting on an ALAN {source-code-block}:

[source,asciidoc]
-------------
[source,alan]
--------------------------
The shore IsA location
--------------------------
-------------

[source,alan]
--------------------
include::inc/snippets.alan[tag=sample]
--------------------


.Alan Code With Title
[source,alan]
-------------------------------------------
Every book IsA object.
  Description "It's just a book."
End Every.
-------------------------------------------


=== Alernative Themes

Beside the default theme for ALAN code, shown above, our toolchain provides two alternative ALAN themes.

ifeval::["{source-highlighter}" == "highlightjs"]
[WARNING]
================================================================================
Highlight.js doesn't currently support the alternative themes!
They will be rendered just as the default theme.
================================================================================
endif::[]


==== Library Theme

The "`library`" theme is intended to differentiate code which is part of a library.

To use the "`library`" theme on an ALAN code block:

[source,asciidoc]
-------------
[source,alan,role="lib"]
-------------


.ALAN code with library (`lib`) theme
[source,alan,role="lib"]
--------------------
include::inc/snippets.alan[tag=sample]
--------------------


==== Tutorial Theme

The "`tutorial`" theme is intended to differentiate code which is part of a tutorial file being described (or quoted from).

To use the "`tutorial`" theme on an ALAN code block:

[source,asciidoc]
-------------
[source,alan,role="tutorial"]
-------------


.ALAN code with tutorial (`tutorial`) theme
[source,alan,role="tutorial"]
--------------------
include::inc/snippets.alan[tag=sample]
--------------------


=== Callouts in Code

Here's an example of ALAN code with {callouts}.

ifeval::["{source-highlighter}" == "highlight"]
[WARNING]
======================
Highlight doesn't currently support callouts in highlighted code blocks!
(See https://github.com/alan-if/alan-docs/issues/36[Issue #36^])

As you can see from the example below, the callout numbers in the code block are not rendered as expected.
======================
endif::[]


[source,alan]
--------------------
include::inc/snippets.alan[tag=short_sample_callouts]
--------------------

<1> Callout number one.
<2> Callout number two.
<3> Callout number three.


[NOTE]
================================================================================
Currently, there aren't any Alan sourcecode examples with callouts in the _Alan Manual_, partly because the original document format (Word) didn't support them, but also because until we were able to create an ALAN syntax for Rouge we were avoiding using them.

Now that we can finally use Rouge for syntax highlighting, we'll be able to use callouts in the _Alan Manual_.
================================================================================

=== Block Comments

ALAN Beta8 introduces
https://alan-if.github.io/alan-docs/manual-alpha/manual.html#comments[block comments^,title="The ALAN Manual » §4.1. Comments"],
a new feature not yet supported by all syntax highlighters.

// Manually define which highlighters support block comments:
ifeval::["{highlighter}" == "Rouge"]
:alan-block-comments: true
endif::[]
ifeval::["{highlighter}" == "Highlight"]
:alan-block-comments: true
endif::[]


ifndef::alan-block-comments[]
[WARNING]
============
Our ALAN syntax definition for {highlighter} doesn't yet support block comments!

As you can see from the example below, block comments are being wrongly parsed by the highlighter.
============
endif::[]


[source,alan]
--------------------
include::inc/snippets.alan[tag=short_sample_blockcomment]
--------------------



== BNF

BNF rules are styled as `bnf` source blocks:

[source,asciidoc]
-----------------
[source,bnf]
--------------
--------------
-----------------

Whether they block is actually highlighted or not depends on whether the syntax highlighter being used has a syntax definition for BNF grammars.
In any case, our template styles don't cover colouring BNF tokens, so regardless of whether BNF blocks are highlighted or not, they'll look the same.

[NOTE]
==========
The reason for this is that we initially planned to add a BNF grammar for each highlighter, but then we didn't follow up with this.
(See https://github.com/alan-if/alan-docs/discussions/119[Discussion #119^])
==========

.BNF Rule Example
[source,bnf]
--------------------------------
class = 'EVERY' id
            [inheritance]
            {property}
        'END' 'EVERY' [id] ['.']
--------------------------------



== Game Transcripts

Game transcript use an `example` block with `role="gametranscript"`.

Although a game transcript is neither source code nor a verbatim block, I'm including it in this document to allow comparing its styles and colors to other block-type elements in the documentation.

[example,role="gametranscript"]
================================================================================
*West of House.* +
Welcome to Dungeon (ALAN Demo). This version created 29-FEB-92.

You are in an open field west of a big white house with a boarded front door. There is a small mailbox here.

&gt; _examine the mailbox_ +
I see nothing special about the mailbox.

&gt; _open it_ +
The small mailbox is now open. The small mailbox contains a leaflet.
================================================================================

[NOTE]
==============
In the above example
==============

.Game Transcript With Title
[example,role="gametranscript"]
================================================================================
&gt; _north_ +
================================================================================

[IMPORTANT]
.CALLOUTS NOT SUPPORTED
================================================================================
Game transcripts are not verbatim blocks, so callouts are not supported.
================================================================================


=== Advanced Transcripts Styling

// ===================
// FOPUB Backend Only:
// ===================
ifeval::["{toolchain}" == "asciidoctor-fopub"]
WARNING: These styles are currently unsupported by the template of the asciidoctor-fopub toolchain!
endif::[]

Game transcripts allow extra styling for player input by using emphasis:

[source,asciidoc]
-------------------------------
[example,role="gametranscript"]
===============================
&gt; _examine apple_
===============================
-------------------------------

which styles the player command in emphasis and red, to make it stand out from the parser responses and game descriptions:

[example,role="gametranscript"]
===============================
&gt; _examine apple_
===============================

Comments in player input can be styles using text spans with the `comment` role:

[source,asciidoc]
---------------------------------------------
[example,role="gametranscript"]
=============================================
&gt; [.comment]#; a commented player input# +
&gt; _x apple_ [.comment]#; some comment#
=============================================
---------------------------------------------

which will style the comment in light grey colour:

[example,role="gametranscript"]
=============================================
&gt; [.comment]#; a commented player input# +
&gt; _x apple_ [.comment]#; some comment#
=============================================

These extra styles are provided for the auto-generated transcripts, which in some toolchains are also processed to add extra styling during their sanitation stage.

=== Inline Transcripts

// ===================
// FOPUB Backend Only:
// ===================
ifeval::["{toolchain}" == "asciidoctor-fopub"]
WARNING: These styles are currently unsupported by the template of the asciidoctor-fopub toolchain!
endif::[]

There's also an inline style for game transcripts, using the `play` role, which can be used to format short transcripts responses or player input inside paragraphs. E.g.

[source,asciidoc]
When the player types [.play]#&gt; _eat object_# the game will print [.play]#You can't eat the object.#

will be rendered as:

When the player types [.play]#&gt; _eat object_# the game will print [.play]#You can't eat the object.#



== Shell

For shell usage examples we use a `literal` block with `role="shell"`.
The color scheme employed is based on the link:https://blogs.msdn.microsoft.com/commandline/2017/08/02/updating-the-windows-console-colors/[new default console scheme of Windows 10^].

[literal, role="shell"]
................................................................................
D:\>alan -help <1>
Usage: ALAN <adventure> [-help] [options]

Arguments:
  <adventure>       -- file name, default extension '.alan' <2> <3>

Options:
  -help             -- this help
  -[-]verbose       -- verbose messages (default: OFF)
  -[-]warnings      -- [don't] show warning messages (default: ON)
  -[-]infos         -- [don't] show informational messages (default: OFF)
  -include <path>   -- additional directory to search after current when
                       looking for imported files (may be repeated)
................................................................................

<1> I've also styled the callouts background and foreground colors to match the shell scheme.
<2> By default, callouts have black circles and white numbers, which don't work well with the black background of the shell scheme.
<3> In the PDF document I haven't been able to tweak callouts colors.

.Shell Sample With Title
--
[literal, role="shell"]
................................................................................
D:\>dir
................................................................................
--

[NOTE]
================================================================================
The _Alan Manual_ contains shell examples with callouts in
https://alan-if.github.io/alan-docs/manual-alpha/manual.html#format_of_messages[App. F.1. Format of Messages^].
================================================================================

// =================
// PDF Backend Only:
// =================
ifeval::["{backend}" != "html5"]

[WARNING]
.CALLOUTS PROBLEM
================================================================================
Unlike the HTML backend, I haven't found a way to customize the background color of callout discs inside shell examples; therefore the default black colored reverse-video circles are lost in the black background of the shell color scheme.

The PDF template uses SVG image files to render the reverse-video circled numbers; although it's possible to customize the XSL settings to point to customized SVG images, this setting would affect all callouts -- i.e. I haven't found a way to use different callout images depending on the block role.

Possible solutions to this problem:

* Provide customized SVG iamges with different background color (affects all callouts in the book).
* Disable callout icons and use text instead (i.e. `(1)`) via the `callout.graphics` setting.
* Use a lighter color scheme for shell (simplest solution).
================================================================================
endif::[]


== Other Syntaxes

Here you can see how other syntaxes not covered by our custom themes are highlighted, i.e. using the default theme.
Which languages/syntaxes are supported depends on the specific syntax highlighter, but since ALAN documentation doesn't usually involve syntaxes other than those covered in our custom themes, this shouldn't be a problem.

.Ruby Example
[source,ruby]
-------------------
include::../../_assets/rouge/custom-rouge-adapter.rb[]
-------------------


.XML Example
[source,xml]
-------------------
include::../../_assets/alan-xsl-fopub/xsl-fopub/fop-config.xml[]
-------------------


// *****************************************************************************
// *                                                                           *
// *                        PART II. SYNTAXES DETAILS                          *
// *                                                                           *
// *****************************************************************************

[[part_two]]
[reftext="Part II"]
= Syntaxes Details

[partintro]
--
This part of the document covers in more detail the syntaxes which are syntax highlighted in the Alan Doc template, and provides also various tests to check how styles are rendered in various contexts.
--

// =============================================================================
//                                 Alan Syntax
// =============================================================================

== Alan Syntax

Different conversion toolchains use different tools for syntax highlighting.
For HTML format conversion, various highlighters are natively supported by Asciidoctor.
For PDF conversion, the usable highlighting tool(s) will be dictated by the third party backend employed.

In all cases, a custom Alan syntax definiton would have to be created for the highlighter tool used with each backend, as none of them ships with a native Alan definition (the sole exception being {Highlight}, which is not natively supported in any of the backends, but we've integrated it via a custom Asciidoctor extension).

// =================
// PDF Backend Only:
// =================
ifeval::["{backend}" != "html5"]

[NOTE]
================================================================================
The PDF conversion toolchain uses {fopub} to create the PDF from the DocBook version of the documents.
Asciidoc-fopub ships with an integrated syntax highlighter, called XSLHL.
================================================================================
endif::[]

////
=== Alan Syntax Elements

The following example shows all the various Alan syntax elements groups that are highlighted, and their associated colors in the chosen color scheme.
////



=== Syntax Tests

Here follow some code snippets for testing both common- and edge-cases in the language and ensure they are rendered as expected.

==== Predefined Classes and Instances

Although it's usually unnecessary to highlight with separate styling the predefined Alan classes and instances (i.e. the `hero`), it might be desirable to be able to do so in tutorials and documentation, for educational purposes.
For this reason, I've added a special highlighting group for the predefined classes, and another one for the `hero`.
Both can be optionally enabled by assigning styles to them, or just be ignored (or set to the same style as normal text) to hide them in the highlighted source.

[source,alan]
--------------------
include::inc/snippets.alan[tag=predefined_classes]
--------------------


==== Quoted Identifiers

Although quoted identifiers shouldn't receive any special coloring in the highlighted code, the syntax definition must be made aware of them to prevent false-positive keywords matches for tokens inside quoted identifiers:

[source,alan]
--------------------------------------------------------------------------------
The 'At the Bus Stop' IsA location --> Watch out for: 'AT', 'THE' and 'STOP'!
End The.
--------------------------------------------------------------------------------

This hidden feature will be implemented differently in each syntax definition, depending on how the specific syntax highlighting engine works.

However, in the final highlighted code, quoted identifiers are shown with the same color and style as the base (normal) text, effectively hiding to the end user the difference between quoted identifiers and plain code (normal identifiers are just treated as plain code).


===== Single Quotes Escaping

To prevent breaking up syntax highlighting, quoted identifiers need to support correctly escaping single quotes inside them via `''`. Although this won't be visible in the highlighted output of the following example, examining the document's source (with formats which support it, like HTML) would allow to check that the quoted identifier was correctly parsed and tagged by the highlighter:


[source,alan]
--------------------------------------------------------------------------------
The 'Bob''s House' IsA location --> Escaped apostrophe in location name.
End The.
--------------------------------------------------------------------------------


==== Strings



==== False Positive Keywords Matches

The following snippet tests against false positive keywords in strings and quoted identifiers. This should never happen, and if it does then the Alan syntax definition for that highlighter is flawed and needs to be fixed.

[source,alan]
--------------------------------------------------------------------------------
-- Tokens in strings and quoted IDs shouldn't be highligthed as keywords...

The 'At the Bus Stop' IsA location --> Watch out for: 'AT', 'THE' and 'STOP'!
  Description
    "An old man waits for the bus here." --> 'AN', 'FOR', 'THE', 'HERE'!
End The.
--------------------------------------------------------------------------------


==== Ligatures Support


The following snippets is meant to test if the current backend and/or font supports ligatures.
Some code fonts support ligatures replacements for common programming symbols, but they might differ in the way the represent `+>=+`, `+<=+`, `+=>+` and `+=<+`, depnding on which combinations are asigned as comparison oprators and which as arrows.

We must ensure that, if ligatures are supported in any converted document, Alan's `+>=+` (greater or equal), `+<=+` (less or equal) and `+=>+` (alternative `Then` in Rules) are correctly represented.

Here's the test snippet:

[source,alan]
--------------------
include::inc/snippets.alan[tag=ligatures]
--------------------

And here's a screenshot of the above code displayed in Sublime Text 3 via the
https://github.com/tajmone/sublime-alan[Sublime Alan^] package:

.Example of correct ligatures support in Sublime Text.
image::sublime-alan-ligatures-screenshot.png[]


==== Callouts Support

Now it's time to test how callouts interact with the syntax highligher.


[source,alan]
--------------------------------------------------------------------------------
The shore IsA location <1>
  Name Shore of Great Sea <2>
  Description "A beautifyl sea shore, probably Paradise lost."
End The shore.
--------------------------------------------------------------------------------

<1> Instance declaration.
<2> Instance name.

// =============================================================================
//                                  BNF Syntax
// =============================================================================

== BNF Syntax

Currently, BNF blocks are not being syntax highlighted but implementing a syntax definition would be very easy.


[source,bnf]
--------------------------------------------------------------------------------
attribute_declaration = id
                      | 'NOT' id
                      | id integer
                      | id string
                      | id id
                      | id '{' values '}'
--------------------------------------------------------------------------------


[source,bnf]
--------------------------------------------------------------------------------
forms = indefinite | definite | negative

definite = 'DEFINITE' article_or_form

indefinite = [ 'INDEFINITE' ] article_or_form

negative = 'NEGATIVE' article_or_form

article_or_form = 'ARTICLE' {statement}
                | 'FORM' {statement}
--------------------------------------------------------------------------------

// *****************************************************************************
// *                                                                           *
// *                  PART III. CUSTOMIZING THE LOOK OF CODE                   *
// *                                                                           *
// *****************************************************************************


[[part_three]]
[reftext="Part III"]
= Customizing The Look of Code

[partintro]
--
Sometimes we need to customize how the code is presented to the reader, beyond what syntax highlighting automatically provides.

This part is dedicated to show how this can be achieved and how it looks like in the output of the different backends.
--

== Custom Color-Marking

The _ALAN Beginner's Guide_ uses this technique to mark specific lines of code, or to single out certain parts of a line, by adopting a custom coloring notation to show which code was added in each step of a tutorial, or just to draw the reader's attention to specific parts of the code.

ifeval::["{highlighter}" == "Rouge"]
[WARNING]
================================================================================
Currently the Rouge highlighter doesn't support code with the `marked` element, and will fail to highlight the code when this element is used.
================================================================================
endif::[]


=== Yellow Highlighting

To mark part of the code as if it was highlighted with a yellow marker, we can enclose it within a pair of single or double hash symbols (`&#35;`).

[source,alan,subs="quotes"]
-------------------------------------------
-- Custom coloring.
-- Example 1: #Yellow highlighting#.
Every book IsA object.
  #Description "It's just a book."
  Has not been_read.#
End Every.
-------------------------------------------

// ==================
// HTML Backend Only:
// ==================
ifeval::["{backend}" == "html5"]
In the HTML output it will wrapped in a `&lt;mark&gt;` tag.
The Asciidoctor HTML backend natively supports this element in the default stylesheet.
endif::[]


// =================
// PDF Backend Only:
// =================
ifeval::["{backend}" != "html5"]
[WARNING]
================================================================================
Currently the PDF toolchain doesn't support correct styling of the `marked` element, it will be only rendered in italics.
I'm still trying to work out how to style this in the custom FOPUB template.
================================================================================
endif::[]


=== Green Highlighting

To use a green color, the `[green]&#35;` variant must be used instead, which uses a custom defined style.


[source,alan,subs="quotes"]
-------------------------------------------
-- Custom coloring.
-- Example 2: [green]#green highlighting#.
Every book IsA object.
  [green]#Description "It's just a book."
  Has not been_read.#
End Every.
-------------------------------------------

// ==================
// HTML Backend Only:
// ==================
ifeval::["{backend}" == "html5"]
In the HTML output it will wrapped in a `&lt;span class="green"&gt;` tag.
Styling of this custom span class is supported via the custom stylesheet used in this project for highlight.js.
endif::[]



// =================
// PDF Backend Only:
// =================
ifeval::["{backend}" != "html5"]
[WARNING]
================================================================================
Currently the PDF toolchain doesn't support styling this custom inline element at all, therefore it won't produce any visible result in the PDF document.
I'm still trying to work out how to support styling this element.
================================================================================
endif::[]


// EOF //
